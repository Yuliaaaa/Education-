#1 Переделываем (а что-то повторяем и закрепляем) наши классы таким образом:
# 1) Person (два свойства: 1. теперь full_name пусть будет свойством, а не функцией (одно
# поле, мы ожидаем - тип строка и состоит из двух слов «имя фамилия»), а свойств name и
# surname нету, 2. год рождения).
# Реализовать методы, которые:
# 1. выделяет только имя из full_name
# 2. выделяет только фамилию из full_name;
# 3. вычисляет сколько лет было/есть/исполнится в году, который передаётся
# параметром (obj.age_in(year)); если не передавать параметр, по умолчанию,
# сколько лет в этом году;
# * (дополнительное) Можете в конструкторе проверить, что в full_name передаётся
# строка, состоящая из двух слов, если нет, вызывайте исключение ��
# * (дополнительное) Можете в конструкторе проверить, что в год рождения меньше или
# равно 2020 (текущий год – для продвинутых), но больше или равно 1900. Если нет,
# вызывайте исключение

class Person:
    common_attr = []

   def __init__(self):
       self.full_name = full_name
       self.age = age

if __name__ == '__main__':
p1 = Person('Yulia Nevm', 24)
print(p1.full_name)
# print(p1.age)

print(p1)

# 2) Employee (наследуемся от Person) (добавляются свойства: должность, опыт работы,
# зарплата)
# * (дополнительное) Можете в конструкторе проверить, что в опыт работы и зарплата
# не отрицательные ��
# Реализовать новые методы:
# 1. возвращает должность с приставкой, которая зависит от опыта работы: Junior —
# менее 3 лет, Middle — от 3 до 6 лет, Senior — больше 6 лет.
# Т.е. метод должен вернуть позицию с приставкой Junior/Middle/Senior &lt;position&gt;.
# Если, например, у вас объект имел должность “programmer” с опытом 2 года,
# метод должен вернуть “Junior programmer”
# 2. метод, который увеличивает зарплату на сумму, которую вы передаёте
# аргументом.


# 3) ITEmployee (наследуемся от Employee)
# 1. Реализовать метод добавления одного навыка в новое свойство skills (список) новым
# методом add_skill (см. презентацию).
# 2. * Реализовать метод добавления нескольких навыков в новое свойство skills (список)
# новым методом add_skills.
# Тут можно выбрать разные подходы: или аргумент один и он список навыков, которым вы
# расширяете список-свойство skill, или вы принимаете неопределённое количество
# аргументов, и все их добавляете в список-свойство skill


# 4) Для всех классов сделайте __str__, чтоб объекты красиво выводились на экран!


# 5) Создайте строки документации к классу и ко всем его методам!

# Задание 2 (на создание новых классов)
# Создать классы
# 1) Прямоугольная площадка (пример: комната) (свойства: две стороны).
# Методы:
# 1. вычисляем площадь,
# 2. вычисляем периметр.
# 2) Студент (свойства: имя-фамилия, специальность, год начала обучения, список
# оценок – при создании объекта, по умолчанию, пустой список).
# Методы:
# 3. Добавить новую оценку в свойство списка оценок
# 4. Посчитать средний балл,
# 5. Посчитать сколько лет учится уже студент.
# 3) Точка на карте (свойства: X, Y).
# Методы:
# 1. Нужно вычислить расстояние до начала координат,
# 2. * вычисляется расстояние между точкой и другой точкой экземпляром этого же
# класса
# 3. ** перевод в другие системы координат
# 3) Для всех классов сделайте __str__, чтоб объекты красиво выводились на экран!
#
# Задание 3 (на создание тестов c помощью unittest)
#
# Создайте наборы тестов на написанные функции из прошлого домашнего
# задания:
#  Написать функцию is_year_leap, принимающую 1 аргумент — год, и
# возвращающую True, если год високосный, и False иначе.
#  Функция принимает три числа a, b, c. Функция должна определить,
# существует ли треугольник с такими сторонами. Если треугольник
# существует, вернёт True, иначе False.
#  Функция принимает три числа a, b, c. Функция должна определить,
# существует ли треугольник с такими сторонами и если существует, то
# возвращает тип треугольника Equilateral triangle (равносторонний), Isosceles
# triangle (равнобедренный), Versatile triangle (разносторонний) или не
# треугольник (Not a triangle).
#
# * Задание 4 (на создание тестов c помощью unittest)
# Создайте наборы тестов на тестирование класса ITEmployee, который вы
# реализовали в Задании 1
# (или Employee, или Person в зависимости до куда вы дошли в выполнении
# Задания 1).
#
# Задание 5 (на генераторы списков и словарей – тема на самостоятельное изучение)
# 1) Создайте список 2 в степени N, где N от 0 до 20.
# 2) У вас есть список целых чисел. Создайте новый список остатков от деления на 3 чисел из
# исходного списка.
# 3) У вас есть список, в котором могут быть разные типы данных. Создайте новый список
# только чисел из этого списка.
# 4) У вас есть список, в котором могут быть разные типы данных. Создайте новый список
# только строк, при этом удалите усе небуквенные символы из них. Воспользуйтесь
# функцией из предыдущего задания (импортируйте её из другого своего файла)
# 5) У вас есть словарь – характеристик человека. Ключи, например, “name”, “surname”, “age”,
# “position”, “address”, “skills”.
# - Сгенерируйте новый словарь с такими же ключами, а в значениях типы значений.
# - Сгенерируйте новый словарь с только парами ключ-значение, если значение исходного
# словаря было строкой. Значения нового словаря должны быть переведены в нижний
# регистр и удалены всё небуквенные символы из них.